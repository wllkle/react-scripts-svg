import {IIconList} from "./interfaces";

const clean = (obj: IIconList): string => {
    const cleaned = JSON.stringify(obj, null, 4);
    return cleaned.replace(/^[\t ]*"[^:\n\r]+(?<!\\)":/gm, match => {
        return match.replace(/"/g, "");
    });
};

const warningComment: string = `/*
*   DO NOT MAKE CHANGES TO THIS FILE 
*   THIS FILE WAS GENERATED BY REACT-SCRIPTS-SVG
*   https://github.com/wllkle/react-scripts-svg
*/`;

export const getTemplate = (
    content: IIconList,
    name: string,
    typescript: boolean,
    propTypes: boolean
): string => {
    const ts = (value: string) => typescript ? value : "";

    return `${warningComment}${ts("\n\n// @ts-nocheck")}

import React${ts(", {ReactNode, CSSProperties}")} from "react";${propTypes ? `\nimport PropTypes from "prop-types";` : ""}
import {iconList${propTypes ? ", IconTypesArray" : ""}${ts(", IconTypes, INode")}} from "./types";

const printableElements${ts(": string[]")} = ["title", "style"];
${ts(`\ninterface IconProps {
    name: IconTypes,
    className?: string,
    style?: CSSProperties
}`)}

const renderChildNodes = (nodes${ts(": INode[]")}): ReactNode => (
    <>
        {nodes.map((node${ts(": INode")}) => {
            const {name, attributes, children} = node;
            const Tag = name.toString();
            const id = Math.random().toString(36).substring(2, 8);

            if (printableElements.includes(name)) {
                if (node.children.length > 0) {
                    const {value} = node.children[0]

                    return (<Tag key={id}>{value}</Tag>);
                }
            }

            return (<Tag key={id} {...attributes}>{renderChildNodes(children)}</Tag>);
        })}
    </>
);

export const ${name} = (props${ts(": IconProps")}) => {
    const {name, className = undefined, style = undefined} = props;
    const iconData = iconList[name] ? iconList[name] : undefined;
    const {viewBox, element} = iconData || {};

    const svgProps = {
        ...(className) && {className},
        ...(style) && {style},
        ...(viewBox) && {viewBox},
        ...(element) && {children: renderChildNodes(element)}
    };
    
    return (
        <svg {...svgProps}/>
    );
}${propTypes ? `\n\n${name}${getPropTypes}` : ""}

export default ${name};
export {IconTypesArray} from "./defs";${ts("\nexport type {IconTypes} from \"./defs\";")}
`;
}

const getPropTypes: string = `.propTypes = {
    name: PropTypes.oneOf(IconTypesArray),
    className: PropTypes.string,
    style: PropTypes.object
}`

export const getTypesTemplate = (content: IIconList, typescript: boolean) => {
    const iconList = clean(content)
    const iconTypes = Object.keys(content).map(key => `"${key}"`)
    const iconTypesArray = iconTypes.join(",\n\t")

    if (typescript) {
        const iconTypesUnion = iconTypes.join(" |\n\t")

        return `export interface INode {
    name: string,
    type: string,
    value: string,
    attributes: object,
    children: INode[]
}

interface IIconList {
    [key: string]: {
        name: string,
        viewBox: string,
        element: INode[]
    }
}

export const iconList: IIconList = ${iconList};
        
export type IconTypes = ${iconTypesUnion};

export const IconTypesArray: string[] = [
    ${iconTypesArray}
];
`;
    }

    return `export const iconList = ${iconList};
    
export const IconTypesArray = [
    ${iconTypesArray}
];
`;
}
